1) data SEGMENT
	01)    DATA - T_IDENTIFIER
	02) SEGMENT - T_DIRECTIVE

<name (1,1)> <mnem (2,1)> 

2) var1 dw -116
	01) VAR1 - T_IDENTIFIER
	02)   DW - T_DIRECTIVE
	03)    - - T_MINUS
	04)  116 - T_DEC

<name (1,1)> <mnem (2,1)> <op (3,2)>


3) strv db 'Lorem ipsum dolor sit amet'
	01)                         STRV - T_IDENTIFIER
	02)                           DB - T_DIRECTIVE
	03) 'Lorem ipsum dolor sit amet' - T_STRING

<name (1,1)> <mnem (2,1)> <op (3,1)>


4) bvar db 1001010b
	01)     BVAR - T_IDENTIFIER
	02)       DB - T_DIRECTIVE
	03) 1001010B - T_BIN

<name (1,1)> <mnem (2,1)> <op (3,1)>


5) dd -0a184dh
	01)      DD - T_DIRECTIVE
	02)       - - T_MINUS
	03) 0A184DH - T_HEX

<mnem (1,1)> <op (2,2)>


6) data ENDS
	01) DATA - T_IDENTIFIER
	02) ENDS - T_DIRECTIVE

<name (1,1)> <mnem (2,1)> 

7)
<empty>

8) dfnd equ [esp + ebp - 7]
	01)            DFND - T_IDENTIFIER
	02)             EQU - T_DIRECTIVE
	03) [esp + ebp - 7] - T_EQU_SUB

<name (1,1)> <mnem (2,1)> <op (3,1)>


9) thr equ 1a65e7h
	01)     THR - T_IDENTIFIER
	02)     EQU - T_DIRECTIVE
	03) 1a65e7h - T_EQU_SUB

<name (1,1)> <mnem (2,1)> <op (3,1)>


10) df equ
	01)  DF - T_IDENTIFIER
	02) EQU - T_DIRECTIVE

<name (1,1)> <mnem (2,1)> 

11) asf equ (18 + 5 + 7 * (5 - 1 + 16 * (17 - 2) + 3) - 10 / 5) - 10
	01)                                                      ASF - T_IDENTIFIER
	02)                                                      EQU - T_DIRECTIVE
	03) (18 + 5 + 7 * (5 - 1 + 16 * (17 - 2) + 3) - 10 / 5) - 10 - T_EQU_SUB

<name (1,1)> <mnem (2,1)> <op (3,1)>


12)
<empty>

13) code SEGMENT
	01)    CODE - T_IDENTIFIER
	02) SEGMENT - T_DIRECTIVE

<name (1,1)> <mnem (2,1)> 

14)
<empty>

15) vv db 2h
	01) VV - T_IDENTIFIER
	02) DB - T_DIRECTIVE
	03) 2H - T_HEX

<name (1,1)> <mnem (2,1)> <op (3,1)>


16) ddw dd 17124612
	01)      DDW - T_IDENTIFIER
	02)       DD - T_DIRECTIVE
	03) 17124612 - T_DEC

<name (1,1)> <mnem (2,1)> <op (3,1)>


17)
<empty>

18) start:
	01) START - T_IDENTIFIER
	02)     : - T_COLON

<label (1,2)> 

19) and byte ptr cs: [edx + esi + 7], eax
	01)  AND - T_INSTRUCTION
	02) BYTE - T_TYPE
	03)  PTR - T_PTR
	04)   CS - T_SEGMENT_REG
	05)    : - T_COLON
	06)    [ - T_OPEN_BRACKET
	07)  EDX - T_GENERAL_REG32
	08)    + - T_PLUS
	09)  ESI - T_GENERAL_REG32
	10)    + - T_PLUS
	11)    7 - T_DEC
	12)    ] - T_CLOSE_BRACKET
	13)    , - T_COMMA
	14)  EAX - T_GENERAL_REG32

<mnem (1,1)> <op (2,11)>, <op (14,1)>


20) neg dwVr
	01)  NEG - T_INSTRUCTION
	02) DWVR - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>


21) jb sml
	01)  JB - T_INSTRUCTION
	02) SML - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>


22) and dfnd, ebp
	01) AND - T_INSTRUCTION
	02)   [ - T_OPEN_BRACKET
	03) ESP - T_GENERAL_REG32
	04)   + - T_PLUS
	05) EBP - T_GENERAL_REG32
	06)   - - T_MINUS
	07)   7 - T_DEC
	08)   ] - T_CLOSE_BRACKET
	09)   , - T_COMMA
	10) EBP - T_GENERAL_REG32

<mnem (1,1)> <op (2,7)>, <op (10,1)>


23) xor vv, asf
	01) XOR - T_INSTRUCTION
	02)  VV - T_IDENTIFIER
	03)   , - T_COMMA
	04)   ( - T_OPEN_PARENTHESIS
	05)  18 - T_DEC
	06)   + - T_PLUS
	07)   5 - T_DEC
	08)   + - T_PLUS
	09)   7 - T_DEC
	10)   * - T_STAR
	11)   ( - T_OPEN_PARENTHESIS
	12)   5 - T_DEC
	13)   - - T_MINUS
	14)   1 - T_DEC
	15)   + - T_PLUS
	16)  16 - T_DEC
	17)   * - T_STAR
	18)   ( - T_OPEN_PARENTHESIS
	19)  17 - T_DEC
	20)   - - T_MINUS
	21)   2 - T_DEC
	22)   ) - T_CLOSE_PARENTHESIS
	23)   + - T_PLUS
	24)   3 - T_DEC
	25)   ) - T_CLOSE_PARENTHESIS
	26)   - - T_MINUS
	27)  10 - T_DEC
	28)   / - T_SLASH
	29)   5 - T_DEC
	30)   ) - T_CLOSE_PARENTHESIS
	31)   - - T_MINUS
	32)  10 - T_DEC

<mnem (1,1)> <op (2,1)>, <op (4,29)>


24) lbl:
	01) LBL - T_IDENTIFIER
	02)   : - T_COLON

<label (1,2)> 

25) cmp cl, strv
	01)  CMP - T_INSTRUCTION
	02)   CL - T_GENERAL_REG08
	03)    , - T_COMMA
	04) STRV - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>, <op (4,1)>


26) xor [ebp + ecx + 2], 1 + 7 - (5 + 2 * (7 + 1 - 5) - 30) + 12
	01) XOR - T_INSTRUCTION
	02)   [ - T_OPEN_BRACKET
	03) EBP - T_GENERAL_REG32
	04)   + - T_PLUS
	05) ECX - T_GENERAL_REG32
	06)   + - T_PLUS
	07)   2 - T_DEC
	08)   ] - T_CLOSE_BRACKET
	09)   , - T_COMMA
	10)   1 - T_DEC
	11)   + - T_PLUS
	12)   7 - T_DEC
	13)   - - T_MINUS
	14)   ( - T_OPEN_PARENTHESIS
	15)   5 - T_DEC
	16)   + - T_PLUS
	17)   2 - T_DEC
	18)   * - T_STAR
	19)   ( - T_OPEN_PARENTHESIS
	20)   7 - T_DEC
	21)   + - T_PLUS
	22)   1 - T_DEC
	23)   - - T_MINUS
	24)   5 - T_DEC
	25)   ) - T_CLOSE_PARENTHESIS
	26)   - - T_MINUS
	27)  30 - T_DEC
	28)   ) - T_CLOSE_PARENTHESIS
	29)   + - T_PLUS
	30)  12 - T_DEC

<mnem (1,1)> <op (2,7)>, <op (10,21)>


27) jmp sml
	01) JMP - T_INSTRUCTION
	02) SML - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>


28) xor dfnd, 0a141fh
	01)     XOR - T_INSTRUCTION
	02)       [ - T_OPEN_BRACKET
	03)     ESP - T_GENERAL_REG32
	04)       + - T_PLUS
	05)     EBP - T_GENERAL_REG32
	06)       - - T_MINUS
	07)       7 - T_DEC
	08)       ] - T_CLOSE_BRACKET
	09)       , - T_COMMA
	10) 0A141FH - T_HEX

<mnem (1,1)> <op (2,7)>, <op (10,1)>


29) cmp edi, [eax + ebp - 5]
	01) CMP - T_INSTRUCTION
	02) EDI - T_GENERAL_REG32
	03)   , - T_COMMA
	04)   [ - T_OPEN_BRACKET
	05) EAX - T_GENERAL_REG32
	06)   + - T_PLUS
	07) EBP - T_GENERAL_REG32
	08)   - - T_MINUS
	09)   5 - T_DEC
	10)   ] - T_CLOSE_BRACKET

<mnem (1,1)> <op (2,1)>, <op (4,7)>


30) xor dwVr, 11b
	01)  XOR - T_INSTRUCTION
	02) DWVR - T_IDENTIFIER
	03)    , - T_COMMA
	04)  11B - T_BIN

<mnem (1,1)> <op (2,1)>, <op (4,1)>


31) cmp ecx, ddw
	01) CMP - T_INSTRUCTION
	02) ECX - T_GENERAL_REG32
	03)   , - T_COMMA
	04) DDW - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>, <op (4,1)>


32)
<empty>

33) sml:    bt eax, ebx
	01) SML - T_IDENTIFIER
	02)   : - T_COLON
	03)  BT - T_INSTRUCTION
	04) EAX - T_GENERAL_REG32
	05)   , - T_COMMA
	06) EBX - T_GENERAL_REG32

<label (1,2)> <mnem (3,1)> <op (4,1)>, <op (6,1)>


34) cmp dl, byte ptr dwVr
	01)  CMP - T_INSTRUCTION
	02)   DL - T_GENERAL_REG08
	03)    , - T_COMMA
	04) BYTE - T_TYPE
	05)  PTR - T_PTR
	06) DWVR - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>, <op (4,3)>


35) lbl1:
	01) LBL1 - T_IDENTIFIER
	02)    : - T_COLON

<label (1,2)> 

36) sar eax, 1
	01) SAR - T_INSTRUCTION
	02) EAX - T_GENERAL_REG32
	03)   , - T_COMMA
	04)   1 - T_DEC

<mnem (1,1)> <op (2,1)>, <op (4,1)>


37) stosb
	01) STOSB - T_INSTRUCTION

<mnem (1,1)> 

38) and fs:strv, dh
	01)  AND - T_INSTRUCTION
	02)   FS - T_SEGMENT_REG
	03)    : - T_COLON
	04) STRV - T_IDENTIFIER
	05)    , - T_COMMA
	06)   DH - T_GENERAL_REG08

<mnem (1,1)> <op (2,3)>, <op (6,1)>


39) jb sml
	01)  JB - T_INSTRUCTION
	02) SML - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>


40) stosb
	01) STOSB - T_INSTRUCTION

<mnem (1,1)> 

41) sar bl, 1
	01) SAR - T_INSTRUCTION
	02)  BL - T_GENERAL_REG08
	03)   , - T_COMMA
	04)   1 - T_DEC

<mnem (1,1)> <op (2,1)>, <op (4,1)>


42) cmp dh, byte ptr [edi + esi + 12h]
	01)  CMP - T_INSTRUCTION
	02)   DH - T_GENERAL_REG08
	03)    , - T_COMMA
	04) BYTE - T_TYPE
	05)  PTR - T_PTR
	06)    [ - T_OPEN_BRACKET
	07)  EDI - T_GENERAL_REG32
	08)    + - T_PLUS
	09)  ESI - T_GENERAL_REG32
	10)    + - T_PLUS
	11)  12H - T_HEX
	12)    ] - T_CLOSE_BRACKET

<mnem (1,1)> <op (2,1)>, <op (4,9)>


43) jmp lbl1
	01)  JMP - T_INSTRUCTION
	02) LBL1 - T_IDENTIFIER

<mnem (1,1)> <op (2,1)>


44) neg byte ptr [eax + ebx + 2]
	01)  NEG - T_INSTRUCTION
	02) BYTE - T_TYPE
	03)  PTR - T_PTR
	04)    [ - T_OPEN_BRACKET
	05)  EAX - T_GENERAL_REG32
	06)    + - T_PLUS
	07)  EBX - T_GENERAL_REG32
	08)    + - T_PLUS
	09)    2 - T_DEC
	10)    ] - T_CLOSE_BRACKET

<mnem (1,1)> <op (2,9)>


45)
<empty>

46) code ENDS
	01) CODE - T_IDENTIFIER
	02) ENDS - T_DIRECTIVE

<name (1,1)> <mnem (2,1)> 

47) END
	01) END - T_DIRECTIVE

<mnem (1,1)> 

