1) data SEGMENT
	01)    DATA - (4) T_IDENTIFIER
	02) SEGMENT - (7) T_DIRECTIVE
<name (1,1)> <mnem (2,1)> 

2) var1 dw -65536
	01)  VAR1 - (4) T_IDENTIFIER
	02)    DW - (2) T_DIRECTIVE
	03)     - - (1) T_MINUS
	04) 65536 - (5) T_DEC
<name (1,1)> <mnem (2,1)> <op (3,2)>

3) strv db 'Lorem ipsum dolor sit amet'
	01)                         STRV - (4) T_IDENTIFIER
	02)                           DB - (2) T_DIRECTIVE
	03) 'Lorem ipsum dolor sit amet' - (28) T_STRING
<name (1,1)> <mnem (2,1)> <op (3,1)>

4) bvar: db 111b
	01) BVAR - (4) T_IDENTIFIER
	02)    : - (1) T_COLON
	03)   DB - (2) T_DIRECTIVE
	04) 111B - (4) T_BIN
<label (1,2)> <mnem (3,1)> <op (4,1)>

5) dd 0fffh
	01)    DD - (2) T_DIRECTIVE
	02) 0FFFH - (5) T_HEX
<mnem (1,1)> <op (2,1)>

6) data ENDS
	01) DATA - (4) T_IDENTIFIER
	02) ENDS - (4) T_DIRECTIVE
<name (1,1)> <mnem (2,1)> 

7)
<empty>

8) dfnd equ [esp + ebp - 7]
	01)            DFND - (4) T_IDENTIFIER
	02)             EQU - (3) T_DIRECTIVE
	03) [esp + ebp - 7] - (15) T_EQU_SUB
<name (1,1)> <mnem (2,1)> <op (3,1)>

9) thr equ 1665a12h
	01)      THR - (3) T_IDENTIFIER
	02)      EQU - (3) T_DIRECTIVE
	03) 1665a12h - (8) T_EQU_SUB
<name (1,1)> <mnem (2,1)> <op (3,1)>

10) df equ
	01)  DF - (2) T_IDENTIFIER
	02) EQU - (3) T_DIRECTIVE
<name (1,1)> <mnem (2,1)> 

11) asf equ 17
	01) ASF - (3) T_IDENTIFIER
	02) EQU - (3) T_DIRECTIVE
	03)  17 - (2) T_EQU_SUB
<name (1,1)> <mnem (2,1)> <op (3,1)>

12)
<empty>

13) code SEGMENT
	01)    CODE - (4) T_IDENTIFIER
	02) SEGMENT - (7) T_DIRECTIVE
<name (1,1)> <mnem (2,1)> 

14)
<empty>

15) vv db 2bh
	01)  VV - (2) T_IDENTIFIER
	02)  DB - (2) T_DIRECTIVE
	03) 2BH - (3) T_HEX
<name (1,1)> <mnem (2,1)> <op (3,1)>

16) ddw dd 17124612
	01)      DDW - (3) T_IDENTIFIER
	02)       DD - (2) T_DIRECTIVE
	03) 17124612 - (8) T_DEC
<name (1,1)> <mnem (2,1)> <op (3,1)>

17)
<empty>

18) start:
	01) START - (5) T_IDENTIFIER
	02)     : - (1) T_COLON
<label (1,2)> 

19) and byte ptr cs: [edx + esi + 7], eax
	01)  AND - (3) T_INSTRUCTION
	02) BYTE - (4) T_TYPE
	03)  PTR - (3) T_PTR
	04)   CS - (2) T_SEGMENT_REG
	05)    : - (1) T_COLON
	06)    [ - (1) T_OPEN_BRACKET
	07)  EDX - (3) T_GENERAL_REG32
	08)    + - (1) T_PLUS
	09)  ESI - (3) T_GENERAL_REG32
	10)    + - (1) T_PLUS
	11)    7 - (1) T_DEC
	12)    ] - (1) T_CLOSE_BRACKET
	13)    , - (1) T_COMMA
	14)  EAX - (3) T_GENERAL_REG32
<mnem (1,1)> <op (2,11)>, <op (14,1)>

20) neg dwVr
	01)  NEG - (3) T_INSTRUCTION
	02) DWVR - (4) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>

21) jb sml
	01)  JB - (2) T_INSTRUCTION
	02) SML - (3) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>

22) and dfnd, ebp
	01) AND - (3) T_INSTRUCTION
	02)   [ - (1) T_OPEN_BRACKET
	03) ESP - (3) T_GENERAL_REG32
	04)   + - (1) T_PLUS
	05) EBP - (3) T_GENERAL_REG32
	06)   - - (1) T_MINUS
	07)   7 - (1) T_DEC
	08)   ] - (1) T_CLOSE_BRACKET
	09)   , - (1) T_COMMA
	10) EBP - (3) T_GENERAL_REG32
<mnem (1,1)> <op (2,7)>, <op (10,1)>

23) xor vv, 12
	01) XOR - (3) T_INSTRUCTION
	02)  VV - (2) T_IDENTIFIER
	03)   , - (1) T_COMMA
	04)  12 - (2) T_DEC
<mnem (1,1)> <op (2,1)>, <op (4,1)>

24)
<empty>

25) cmp cl, strv
	01)  CMP - (3) T_INSTRUCTION
	02)   CL - (2) T_GENERAL_REG08
	03)    , - (1) T_COMMA
	04) STRV - (4) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>, <op (4,1)>

26) xor fs: byte ptr[eax + esi + 1], 2
	01)  XOR - (3) T_INSTRUCTION
	02)   FS - (2) T_SEGMENT_REG
	03)    : - (1) T_COLON
	04) BYTE - (4) T_TYPE
	05)  PTR - (3) T_PTR
	06)    [ - (1) T_OPEN_BRACKET
	07)  EAX - (3) T_GENERAL_REG32
	08)    + - (1) T_PLUS
	09)  ESI - (3) T_GENERAL_REG32
	10)    + - (1) T_PLUS
	11)    1 - (1) T_DEC
	12)    ] - (1) T_CLOSE_BRACKET
	13)    , - (1) T_COMMA
	14)    2 - (1) T_DEC
<mnem (1,1)> <op (2,11)>, <op (14,1)>

27) jmp sml
	01) JMP - (3) T_INSTRUCTION
	02) SML - (3) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>

28) xor dfnd, asf
	01) XOR - (3) T_INSTRUCTION
	02)   [ - (1) T_OPEN_BRACKET
	03) ESP - (3) T_GENERAL_REG32
	04)   + - (1) T_PLUS
	05) EBP - (3) T_GENERAL_REG32
	06)   - - (1) T_MINUS
	07)   7 - (1) T_DEC
	08)   ] - (1) T_CLOSE_BRACKET
	09)   , - (1) T_COMMA
	10)  17 - (2) T_DEC
<mnem (1,1)> <op (2,7)>, <op (10,1)>

29) cmp edi, [eax + ebp - 5]
	01) CMP - (3) T_INSTRUCTION
	02) EDI - (3) T_GENERAL_REG32
	03)   , - (1) T_COMMA
	04)   [ - (1) T_OPEN_BRACKET
	05) EAX - (3) T_GENERAL_REG32
	06)   + - (1) T_PLUS
	07) EBP - (3) T_GENERAL_REG32
	08)   - - (1) T_MINUS
	09)   5 - (1) T_DEC
	10)   ] - (1) T_CLOSE_BRACKET
<mnem (1,1)> <op (2,1)>, <op (4,7)>

30) xor dwVr, 'saaa'
	01)    XOR - (3) T_INSTRUCTION
	02)   DWVR - (4) T_IDENTIFIER
	03)      , - (1) T_COMMA
	04) 'saaa' - (6) T_STRING
<mnem (1,1)> <op (2,1)>, <op (4,1)>

31) cmp ecx, ddw
	01) CMP - (3) T_INSTRUCTION
	02) ECX - (3) T_GENERAL_REG32
	03)   , - (1) T_COMMA
	04) DDW - (3) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>, <op (4,1)>

32)
<empty>

33) sml:    bt eax, ebx
	01) SML - (3) T_IDENTIFIER
	02)   : - (1) T_COLON
	03)  BT - (2) T_INSTRUCTION
	04) EAX - (3) T_GENERAL_REG32
	05)   , - (1) T_COMMA
	06) EBX - (3) T_GENERAL_REG32
<label (1,2)> <mnem (3,1)> <op (4,1)>, <op (6,1)>

34) cmp dl, byte ptr dwVr
	01)  CMP - (3) T_INSTRUCTION
	02)   DL - (2) T_GENERAL_REG08
	03)    , - (1) T_COMMA
	04) BYTE - (4) T_TYPE
	05)  PTR - (3) T_PTR
	06) DWVR - (4) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>, <op (4,3)>

35) lbl1:
	01) LBL1 - (4) T_IDENTIFIER
	02)    : - (1) T_COLON
<label (1,2)> 

36) sar eax, 1
	01) SAR - (3) T_INSTRUCTION
	02) EAX - (3) T_GENERAL_REG32
	03)   , - (1) T_COMMA
	04)   1 - (1) T_DEC
<mnem (1,1)> <op (2,1)>, <op (4,1)>

37) stosb
	01) STOSB - (5) T_INSTRUCTION
<mnem (1,1)> 

38) and es:strv, dh
	01)  AND - (3) T_INSTRUCTION
	02)   ES - (2) T_SEGMENT_REG
	03)    : - (1) T_COLON
	04) STRV - (4) T_IDENTIFIER
	05)    , - (1) T_COMMA
	06)   DH - (2) T_GENERAL_REG08
<mnem (1,1)> <op (2,3)>, <op (6,1)>

39) jb sml
	01)  JB - (2) T_INSTRUCTION
	02) SML - (3) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>

40) stosb
	01) STOSB - (5) T_INSTRUCTION
<mnem (1,1)> 

41) sar bl, 1
	01) SAR - (3) T_INSTRUCTION
	02)  BL - (2) T_GENERAL_REG08
	03)   , - (1) T_COMMA
	04)   1 - (1) T_DEC
<mnem (1,1)> <op (2,1)>, <op (4,1)>

42) cmp dh, byte ptr [edi + esi + 12h]
	01)  CMP - (3) T_INSTRUCTION
	02)   DH - (2) T_GENERAL_REG08
	03)    , - (1) T_COMMA
	04) BYTE - (4) T_TYPE
	05)  PTR - (3) T_PTR
	06)    [ - (1) T_OPEN_BRACKET
	07)  EDI - (3) T_GENERAL_REG32
	08)    + - (1) T_PLUS
	09)  ESI - (3) T_GENERAL_REG32
	10)    + - (1) T_PLUS
	11)  12H - (3) T_HEX
	12)    ] - (1) T_CLOSE_BRACKET
<mnem (1,1)> <op (2,1)>, <op (4,9)>

43) jmp lbl1
	01)  JMP - (3) T_INSTRUCTION
	02) LBL1 - (4) T_IDENTIFIER
<mnem (1,1)> <op (2,1)>

44) neg byte ptr [eax + ebx + 2]
	01)  NEG - (3) T_INSTRUCTION
	02) BYTE - (4) T_TYPE
	03)  PTR - (3) T_PTR
	04)    [ - (1) T_OPEN_BRACKET
	05)  EAX - (3) T_GENERAL_REG32
	06)    + - (1) T_PLUS
	07)  EBX - (3) T_GENERAL_REG32
	08)    + - (1) T_PLUS
	09)    2 - (1) T_DEC
	10)    ] - (1) T_CLOSE_BRACKET
<mnem (1,1)> <op (2,9)>

45)
<empty>

46) code ENdS
	01) CODE - (4) T_IDENTIFIER
	02) ENDS - (4) T_DIRECTIVE
<name (1,1)> <mnem (2,1)> 

47) END
	01) END - (3) T_DIRECTIVE
<mnem (1,1)> 

